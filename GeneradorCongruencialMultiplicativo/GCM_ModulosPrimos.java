import java.util.Random;
public class GCM_ModulosPrimos {
    private static final long[] moduloP = { 32057L, 32537L, 32911L, 32687L, 32603L, 32707L, 32933L }; // Cada n√∫mero tiene una L para forzarlo a ser "long".

    // m√≥dulo (m), semilla (X0), multiplicador (a), per√≠odo te√≥rico (m-1).
    private final long m, X0, a, periodo;
    private final Random numAleatorio = new Random();

    public GCM_ModulosPrimos() { //M√©todo constructor para el Generador.
        this.m = moduloP[numAleatorio.nextInt(moduloP.length)]; // Paso 1) Seleccionamos el m√≥dulo aleatorio. Produce un n√∫m. aleatorio entre 0 y moduloP.length

        long valorSemilla; // Paso 2) Generar semilla X0 aleatoria en ‚àà [1,2,..., m‚àí1]
        do { //Entra en un bucle do-while; que se repite mientras la semilla calculada sea cero.
        	valorSemilla = Math.abs(numAleatorio.nextLong()) % m; //Se genera un n√∫mero aleatorio que finalmente ser√° positivo por el valor absoluto. "% m" reduce ese valor al rango [0, m-1].
        } while (valorSemilla == 0); //Si ese resultado es 0, volvemos a repetir.
        this.X0 = valorSemilla;

        this.a = generarRaizPrimitivaAleatoria(this.m); // Paso 3) Generar 'a' probando candidatos aleatorios en ‚àà [2,3,..., m‚àí1] para garantizar per√≠odo.

        this.periodo = m - 1; // Paso 4) Asignamos el per√≠odo te√≥rico para "m primo" como "m ‚àí 1".
    }
    
    public void ImprimirParametros () {
        System.out.println("=== Par√°metros para un Generador Congruencial Multiplicativo ===");
        System.out.println("Valor para ¬¥m¬¥ (m√≥dulo)           : " + m);
        System.out.println("Valor para ¬¥Xo¬¥ (semilla inicial) : " + X0);
        System.out.println("Valor para ¬¥a¬¥ (multiplicador)    : " + a);
        System.out.println("¬øCu√°l es el per√≠odo te√≥rico?      : " + periodo);
        System.out.println();
    }

    // Genera un multiplicador 'a' que sea ra√≠z primitiva m√≥dulo "m",
    // probando candidatos aleatorios en ‚àà [2,3,..., m‚àí1]. Nota: La funci√≥n totiente de Euler cuenta los enteros positivos hasta un n√∫mero dado "n" que son relativamente primos a "n".
    private long generarRaizPrimitivaAleatoria(long m) {
        long phi = m - 1;                                  // El m√©todo recibe el m√≥dulo œÜ(m) o phi(m) para que sea = m‚àí1.
        long[] factores = factorizarN(phi);                // Llamamos a factorizarN(œÜ), que devuelve un arreglo con los factores primos √∫nicos de œÜ.

        // Probamos un buble infinito de candidatos aleatorios en el rango ‚àà [2,3,..., m‚àí1] hasta encontrar ra√≠z primitiva.
        while (true) {
            // Genera un n√∫mero aleatorio en el rango ‚àà [2,3,..., m‚àí1]:
            long candidato = 2 + (Math.abs(numAleatorio.nextLong()) % (m - 2)); // Se genera un n√∫mero al azar (quiz√°s negativo); se reduce al rango [0, m-3] + 2 = [2, m-1]. Potencial "a".
            boolean esRaiz = true;                          // Supondremos que es efectivamente ra√≠z primitiva, hasta verificar lo contrario.

            // Verificamos la condici√≥n de la ra√≠z primitiva: para cada factor de œÜ,
            // candidato^(œÜ/f) mod m. Un n√∫mero "g" es ra√≠z primitiva si su orden multiplicativo es exactamente "ùúô". Nos aseguramos de que ninguna de las potencias parciales sea 1.
            for (long f : factores) {
                if (powMod(candidato, phi / f, m) == 1) {   // Si resulta ser 1 (no deber√≠a); entonces esRaiz = false y salimos del for. 
                    esRaiz = false;
                    break;                                  // Salimos del bucle de factores.
                }
            }
            if (esRaiz) { // Si pas√≥ todas las pruebas, devolvemos el candidato calculado y totalmente v√°lido.
                return candidato;
            }
        } 
    } // Sino, bucle que se repite sin parar, y as√≠ se prueba otro candidato.

    // Genera el siguiente valor de la secuencia: X_{n+1} = (a * X_n) mod m; la f√≥rmula b√°sica de un Generador Congruencial Multiplicativo.
    private long siguienteValorXn(long xi) {
        return (a * xi) % m; // Multiplica "xi" por "a" y aplica m√≥dulo "m".
    }

    // Factoriza n en sus factores primos √∫nicos.
    private long[] factorizarN(long n) {
        long[] arrTemp = new long[64]; // Arreglo temporal para factores con un tama√±o 64 que usaremos para acumular posibles factores primos.
        int contador = 0; // El Contador llevar√° la cuenta de cu√°ntos factores encontramos.
        long num = n; // Copia de "n" que iremos reduciendo al dividir por sus factores.

        // Probar divisor 2 (√∫nico par).
        if (num % 2 == 0) { 
        	arrTemp[contador++] = 2; // Si num es divisible entre 2, guardamos el ‚Äúfactor 2‚Äù en el contador.
            while (num % 2 == 0) {
                num /= 2; // Luego, con el while dividimos repetidamente num entre 2 hasta que ya no sea m√∫ltiplo de 2.
            }
        }

        // Probar divisores impares 3, 5, 7, ..., hasta sqrt(num), √≥sea, la raiz cuadrada (square root) de num.
        for (long i = 3; i * i <= num; i += 2) { // Aumentamos i += 2 (solo √≠mpares). La condici√≥n significa ‚Äúhasta la ra√≠z cuadrada de num‚Äù. Si no hay un factor hasta la ra√≠z, resultar√° ser primo.
            if (num % i == 0) { // Cada vez que encuentras que num % i == 0, guard√°s i en el arreglo temporal con el contador en aumento.
            	arrTemp[contador++] = i;
                while (num % i == 0) { // Despu√©s, en el while; decidiremos que si num % i == 0: dividiremos el num entre i; esto reduce al m√°ximo num dividi√©ndolo por i repetidamente.
                    num /= i;
                }
            }
        }

        if (num > 1) { // Despu√©s de dividir por todos los factores hasta la ra√≠z, si a√∫n sobra un valor mayor que 1, entonces es primo.
        	arrTemp[contador++] = num;
        }

        long[] factores = new long[contador]; // Creamos un nuevo arreglo factores de tama√±o exacto de Contador.
        System.arraycopy(arrTemp, 0, factores, 0, contador);       // Copiamos los factores √∫nicos (desde el arrTemp[0] hasta arrTemp[Contador-1]) al resultado del nuevo arreglo.
        return factores;                                     // Devolvemos factores, que contiene los factores primos √∫nicos de "n".
    }

    // Exponenciaci√≥n modular r√°pida, denominada powMod: implementa el algoritmo de exponenciaci√≥n modular en tiempo O(log exp).
    // Este m√©todo calcula la (base^exp) % modulo usando ‚Äúexponenciaci√≥n r√°pida‚Äù (algoritmo binario). Es para calcular el candidato^(œÜ/f) mod m sin crear n√∫meros enormes. 
    private long powMod(long base, long exp, long mod) {
        long resultado = 1;                                  // Inicializamos siempre el resultado en 1.
        base %= mod;                                         // Reducimos la base % m al rango ‚àà [0,..., m‚àí1] antes de empezar. As√≠ trabajamos siempre con n√∫meros reducidos.
        while (exp > 0) {                                    // Mientras el exponente exp sea mayor que 0, seguimos iterando.
            if ((exp & 1) == 1) {                            // Si el bit menos significativo de exp es 1. Esto equivale a decir ‚Äúsi exp es impar‚Äù.
                resultado = (resultado * base) % mod;        // En ese caso, multiplicamos el resultado por la base, y volvemos a tomar % mod.
            }											   	 // Es la parte que ‚Äúincluye‚Äù el factor actual en la potencia.
            base = (base * base) % mod;                      // Con cada iteraci√≥n elevamos la base al cuadrado y tomamos el m√≥dulo. Con cada paso es: base ‚Üí base^2; exp ‚Üí exp/2.
            exp >>= 1;                                       // El operador >>= 1 desplaza todos los bits de exp una posici√≥n a la derecha. Equivale a exp = exp/2 (enteros).
        }
        return resultado;                                    // Devuelve el resultado que contiene: base^exp % mod. Para esto est√° dise√±ado el powMod.
    }

    public void imprimirIteraciones(int n) {
        // Imprime un encabezado indicando que vamos a mostrar las √∫ltimas n iteraciones.
        // junto con la verificaci√≥n de si la semilla X‚ÇÄ reaparece antes.
        System.out.println("=== √öltimas " + n + " iteraciones y sus valores uniformes (con verificaci√≥n de per√≠odo) ===");

        long xi = X0;                // 1) Inicializamos 'xi' con la semilla X0.
        long corte = periodo - n;    // 2) Calculamos cu√°ntos pasos debemos avanzar antes de imprimir los √∫ltimos n valores: 'corte' representa la posici√≥n X_{periodo‚àín} en la secuencia.

        for (long i = 1; i <= corte; i++) { // Primer bucle: avanzamos hasta X_{corte}, verificando si X‚ÇÄ reaparece antes.
            xi = siguienteValorXn(xi);  // 3) Calculamos la siguiente iteraci√≥n de la sucesi√≥n: Xi = (a * X_{i-1}) mod m.

            if (xi == X0) { // 4) Comprobamos si al calcular Xi volvimos a la semilla X‚ÇÄ:
                System.out.println("Semilla Xo reapareci√≥ en iteraci√≥n " + i + ", per√≠odo incompleto. Per√≠odo = " + i);
                System.out.println();
                return;               // Salimos del m√©todo, ya no imprimimos los √∫ltimos n valores.
            }
        }

        // --- Si llegamos hasta aqu√≠, significa que NO volvimos a X‚ÇÄ antes de X_{corte}.
        // Ahora imprimimos las √∫ltimas n iteraciones (desde X_{corte+1} hasta X_{periodo}).
        for (int i = 1; i <= n; i++) {
            xi = siguienteValorXn(xi);        // 5) En cada paso, calculamos Xi para la posici√≥n corte + i.
            double uniforme = xi / (double) m; // 6) Convertimos Xi en n√∫mero uniforme en [0,1].

            System.out.printf("Xn = %d | N√∫m. uniforme = %.5f%n", corte + i, uniforme);
        }

        System.out.println("Periodo completo encontrado en la iteraci√≥n " + periodo + ".");
        System.out.println();
    }

    public static void main(String[] args) {
    	GCM_ModulosPrimos generador = new GCM_ModulosPrimos();
    	generador.imprimirIteraciones(5);
        generador.ImprimirParametros();
    }
}
